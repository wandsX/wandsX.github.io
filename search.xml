<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>cs值类型和引用类型</title>
    <url>/2019/12/30/cs%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<center><b>学习C#的值类型和引用类型</b></center>

<a id="more"></a>
<h2 id="1-类型划分"><a href="#1-类型划分" class="headerlink" title="1.类型划分"></a>1.类型划分</h2><p>一个类型要么是<strong>值类型</strong>，要么是<strong>引用类型</strong>。</p>
<p>区别在于拷贝方式：<strong>值类型的数据总是拷贝值，引用类型数据总是拷贝引用</strong></p>
<h3 id="1-1-值类型"><a href="#1-1-值类型" class="headerlink" title="1.1 值类型"></a>1.1 值类型</h3><p>将一个值赋值给变量1，再将变量1赋值给变量2，会在变量2的位置创建值的拷贝，而不是引用变量1的位置。也就是说改变 变量1的值不会影响到变量2的值。</p>
<h3 id="1-2-引用类型"><a href="#1-2-引用类型" class="headerlink" title="1.2 引用类型"></a>1.2 引用类型</h3><p>引用类型的变量存储数据存储位置的引用，而不是直接存储数据。</p>
<p>用c/cpp的意思理解就是指针，存放的数据的地址。<strong>（存放在堆中）</strong></p>
<h2 id="2-可空修饰符"><a href="#2-可空修饰符" class="headerlink" title="2.可空修饰符"></a>2.可空修饰符</h2><p>一般不将null值赋值给值类型。可控修饰符？</p>
<pre><code class="lang-c#">int? count = null;
</code></pre>
<p>在c#3.0可以使用 <strong>var</strong> 来声明隐式类型的局部变量。声明变量时，如果能用确定类型的表达式初始化它，就允许变量的数据类型“隐式。</p>
<p>当然在数据类型已知的情况下最好不要用 <strong>var</strong> 关键字，这增加了代码的可读性。</p>
<p>c# var 由编译器严格确定类型 ，确定之后不在更改，比如Javascript中将一个变量为var,可以将不同类型重新赋值给这些变量。</p>
<h3 id="2-1-匿名类型"><a href="#2-1-匿名类型" class="headerlink" title="2.1 匿名类型"></a>2.1 匿名类型</h3><p>var支持匿名类型。</p>
<ul>
<li><p>匿名类型式在方法内部动态声明的数据类型，而不是通过显式的类定义来声明。</p>
<pre><code class="lang-c#">var patent = new {Title = &quot;BIf&quot;,
                  YearOfPublication = &quot;1784&quot;};
</code></pre>
</li>
</ul>
<h2 id="3-元组"><a href="#3-元组" class="headerlink" title="3.元组"></a>3.元组</h2><p>这是c#7.0的新语法。</p>
<p>元组的声明和赋值的示例。</p>
]]></content>
      <categories>
        <category>c#本质论</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>c# 语法</tag>
      </tags>
  </entry>
  <entry>
    <title>cs语法数据类型</title>
    <url>/2019/12/20/cs%E8%AF%AD%E6%B3%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p><center><b>学习C#数据类型</b></center><br><a id="more"></a></p>
<h2 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h2><p>c#基本数据类型包括：整数类型， 浮点类型，decimal类型（特殊的浮点类型，能存储大数字而无表示错误）。</p>
<h3 id="1-1-整数类型"><a href="#1-1-整数类型" class="headerlink" title="1.1 整数类型"></a>1.1 整数类型</h3><script type="math/tex; mode=display">
\begin{array}\\
{\text {类型}} & { \text { 大小 }} & {范围} & {\text { BCL名称}}\\
{\text { sbyte }} & {8 \text { 位 }} & {-128-127} & {\text { system. SByte }} \\
{\text { byte }} & {8 \text { 位 }} & {0-255} & {\text { system. Byte }} \\
{\text { short }} & {16 \text {位 }} & {0-255} & {\text { System. Int16 } }\\
{\text { ushort }} & {16 \text { 位 }} & {0-32768-32767} & {\text { System. UInt 16 } } \\
{\text { int }} & {32 \text { 位 }} & {0-65535647483647} & {\text { system. Int 32 }} \\
{\text { uint }} & {32 \text { 位}} & {0-4294967295} & {\text { System. UInt 32 }} \\
{\text { Long }} & {64 \text { 位 }} & {-9223372036854775808-9223372036854775807}& {\text { System. Int 64 }} \\
{\text { ulong }} & {64 \text { 位 }}&{0-18446744073709551615} & {\text { system. UInt } 64}
\end{array}</script><blockquote>
<p>BCL名称是基类库中的类型名称。</p>
<p>设计规范：指定数据类型时使用c#关键字而不是BCL名称，且保持一致。</p>
</blockquote>
<h3 id="1-2-浮点类型"><a href="#1-2-浮点类型" class="headerlink" title="1.2 浮点类型"></a>1.2 浮点类型</h3><script type="math/tex; mode=display">
\begin{array}\\
\hline 
\text{类型} & {大小} & {  范围 }    & {BCL名称} & {有效数位} & {后缀}               \\
\hline
\text { float } & {32位}  & {\pm 1.5 \times 10^{-3}-\pm 3.4 \times 10^{35}} & 
      {\text { System. Single }} & {7} &   {F \text { 或 f}}                 \\
\hline 
\text { double } & {64 \text { 位 }} & 
      {\pm 5.0 \times 10^{-134}}{-\pm 1.7 \times 10^{100}} & 
      {\text { System. Double }} & {15-16} & {\text { D 或 d}}                 \\
\hline
\end{array}</script><h3 id="1-3-decimal类型"><a href="#1-3-decimal类型" class="headerlink" title="1.3 decimal类型"></a>1.3 decimal类型</h3><p>c#提供了128位精度的十进制浮点类型。</p>
<script type="math/tex; mode=display">
\begin{array}\\
\hline
\text {类型} & {大小 }&    {范围} & {BCL名称} & { 有效数位 } & {后缀}                        \\    \hline
\text { decimal } 
    & 128 \text { 位 } 
    &\left(-7.9 \times 10^{3}-7.9 \times 10^{8}\right) /\left(10^{6}-10^{8}\right)
    & \text { system. Decimal }
    & 28-29 & \text { M或 } m\\
\hline
\end{array}</script><p>decimal类型和浮点数不一样，decimal类型保证范围内所有十进制数都是精确的。所以0.1就是0.1,而不是近似值。</p>
<p>此外decimal类型精度很高，但是范围较小。</p>
<h3 id="1-4-字面值"><a href="#1-4-字面值" class="headerlink" title="1.4 字面值"></a>1.4 字面值</h3><p>表示源代码中的固定值。</p>
<pre><code class="lang-c#">// 如下面的42和1.523

Console.WriteLine(2);
Console.WriteLine(1.523);
</code></pre>
<p>如果直接将值放入源代码中，被称为：<strong>硬编码</strong>， 通常这样做会使得代码很难维护，有可能需要进行再次编译才能继续使用。所有一种解决办法是直接读取配置文件中所设立的值，在需要改动的时候，直接进行修改配置文件的值即可。</p>
<p>对于字面值的输出：</p>
<pre><code class="lang-c#">Console.WriteLine(1.618033988749895);

// 输出不精确的值
&gt;&gt; 1.61803398874989

Console.WriteLine(1.618033988749895M);

// 加上后缀，输出精确的值
&gt;&gt; 1.61803398874989
</code></pre>
<p>F和D将字面值分别显式声明没float,double。</p>
<p>对于整数类型，相应后缀是U, L, LU, UL。</p>
<ul>
<li>无后缀的数值字面值按以下顺序解析成能存储该值的第一个数据类型：int, uint, long, ulong.</li>
<li>后缀为U的数值子面子按以下顺序解析成能存储该值的第一个数据类型：uint, ulong。</li>
<li>后缀为L的数值字面值按以下顺序解析成能存储该值的第一个数据类型：long, ulong.</li>
</ul>
<h2 id="2-更多基本类型"><a href="#2-更多基本类型" class="headerlink" title="2. 更多基本类型"></a>2. 更多基本类型</h2><h3 id="2-1-布尔类型"><a href="#2-1-布尔类型" class="headerlink" title="2.1 布尔类型"></a>2.1 布尔类型</h3><p>占用一个字节。</p>
<h3 id="2-2-字符类型"><a href="#2-2-字符类型" class="headerlink" title="2.2 字符类型"></a>2.2 字符类型</h3><p>char类型的BCL名称是：<strong>System.Char</strong>。</p>
<h3 id="2-3-字符串类型"><a href="#2-3-字符串类型" class="headerlink" title="2.3 字符串类型"></a>2.3 字符串类型</h3><p>string类型的BCL名称是：<strong>System.String</strong>.</p>
<p>支持字面值格式，逐字前缀@，允许$前缀进行字符串插值。string是一种“不可变”类型。</p>
<p>逐字和插值形式可以组合使用。</p>
<h4 id="2-3-1-字面值格式构造字符串"><a href="#2-3-1-字面值格式构造字符串" class="headerlink" title="2.3.1 字面值格式构造字符串"></a>2.3.1 字面值格式构造字符串</h4><h4 id="2-3-2-前缀-格式输出字符串"><a href="#2-3-2-前缀-格式输出字符串" class="headerlink" title="2.3.2 前缀@格式输出字符串"></a>2.3.2 前缀@格式输出字符串</h4><p>@指明转义序列不被处理，结果是一个逐字字符串字面值，不仅将反斜杠当作普通字符，还会逐字解释所有空白字符。@开头的字符串唯一支持的转义序列是 <strong>“”</strong>代表是一个双引号。</p>
<h4 id="2-3-4-字符串插值"><a href="#2-3-4-字符串插值" class="headerlink" title="2.3.4 $字符串插值"></a>2.3.4 $字符串插值</h4><p>字符串插值本质上事C#的一个语法糖。</p>
<pre><code class="lang-c#">Console.WriteLine($&quot;Your full name is {firstName} {lastName}.&quot;);

// 上述代码会转换成下面的代码
object[] args = new object[] { firstName, lastName };
Console.WriteLine(string.Format(&quot;Your full name is {0} {1}.&quot;, args));
</code></pre>
<h2 id="3-null-和-void"><a href="#3-null-和-void" class="headerlink" title="3. null 和 void"></a>3. null 和 void</h2><h3 id="3-1-null"><a href="#3-1-null" class="headerlink" title="3.1 null"></a>3.1 null</h3><p>null可直接赋值给字符串变量，表明变量为“空”，不指向任何位置。</p>
<p>只能将null赋值给引用类型，指针类型， 可空值类型。</p>
<p>赋值了null的变量已设置，而未赋值的变量会造成编译时错误。</p>
<h3 id="3-2-void"><a href="#3-2-void" class="headerlink" title="3.2 void"></a>3.2 void</h3><ul>
<li>void 本质上不是数据类型，它只是指出没有数据类型。</li>
</ul>
<h2 id="4-数据类型转换"><a href="#4-数据类型转换" class="headerlink" title="4.数据类型转换"></a>4.数据类型转换</h2><h3 id="4-1-显式转换"><a href="#4-1-显式转换" class="headerlink" title="4.1 显式转换"></a>4.1 显式转换</h3><p>写法：（type）。</p>
<h4 id="4-1-1-checked-和-unchecked转换"><a href="#4-1-1-checked-和-unchecked转换" class="headerlink" title="4.1.1 checked 和 unchecked转换"></a>4.1.1 checked 和 unchecked转换</h4><pre><code class="lang-c#">static void Main(string[] args)
{
    // checked快代码在运行时发生赋值溢出将引发异常。
    checked
    {
        int n = int.MaxValue;
        n = n + 1;
        Console.WriteLine(n);
    }

}
</code></pre>
<p>c#提供一个命令行选项将默认行为从unchecked改为checked。</p>
<p>也支持unchecked快来强制不进行溢出检查，块中溢出的赋值不会引发异常。</p>
<h3 id="4-2-隐式转换"><a href="#4-2-隐式转换" class="headerlink" title="4.2 隐式转换"></a>4.2 隐式转换</h3><p>不多比比。</p>
<h3 id="4-3-不适用转型操作符的类型转换"><a href="#4-3-不适用转型操作符的类型转换" class="headerlink" title="4.3 不适用转型操作符的类型转换"></a>4.3 不适用转型操作符的类型转换</h3><h4 id="4-3-1-Parse-方法"><a href="#4-3-1-Parse-方法" class="headerlink" title="4.3.1  Parse()方法"></a>4.3.1  Parse()方法</h4><p>每个数值数据类型都包含一个Parse() 方法，允许将字符串转换成对应的数值类型。</p>
<pre><code class="lang-c#">string text = &quot;9.11E-31&quot;;
float value = float.Parse(text);
</code></pre>
<h4 id="4-3-2-System-Convert进行类型转换"><a href="#4-3-2-System-Convert进行类型转换" class="headerlink" title="4.3.2 System.Convert进行类型转换"></a>4.3.2 System.Convert进行类型转换</h4><pre><code class="lang-c#">string middleText = &quot;241.626&quot;;
double middleC = System.Convert.ToDouble(middleText);
bool boolean = System.Convert.ToBoolean(middleC);
</code></pre>
<p>Convert只支持少量类型，且不可扩展，允许从bool char sbyte short int long ushort uint ulong float double decimal DateTime string 转换到这些类型中的任何一种。</p>
<h4 id="4-3-3-ToString转换成string"><a href="#4-3-3-ToString转换成string" class="headerlink" title="4.3.3 ToString转换成string"></a>4.3.3 ToString转换成string</h4><h4 id="4-3-4-TryParse"><a href="#4-3-4-TryParse" class="headerlink" title="4.3.4 TryParse()"></a>4.3.4 TryParse()</h4><p>和Parse()方法非常相似，只是转换失败而不是引发异常，而是返回false.</p>
<pre><code class="lang-c#">static void Main(string[] args)
{
    Console.Write(&quot;Enter a number: &quot;);
    string input = Console.ReadLine();
    /*
        c#7.0之前的版本对于number要先声明才能使用。
    */
    if (double.TryParse(input, out double number))
    {
        Console.WriteLine(number);

    }
    else
    {
        Console.WriteLine(
            &quot;The text entered was not a vaild number.&quot;
        );
    }
}
</code></pre>
]]></content>
      <categories>
        <category>c#本质论</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>c# 语法</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解cs泛型</title>
    <url>/2019/12/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3cs%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<p><center><b>这篇文章学习一下c#的泛型</b> </center><br><a id="more"></a></p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>泛型分为两种形式：<strong>泛型类型</strong>（接口，委托，结构，类）和 <strong>泛型方法</strong>，两者都是表示API的基本方法。</p>
<p>我们看下面的两个语句：</p>
<pre><code class="lang-c#">Dictonary&lt;TKey, TValue&gt; // 未绑定泛型

Dictonary&lt;string, int&gt;  // 已构造类型
</code></pre>
<p>类型参数是<strong>TKey, TValue</strong>，而类型实参是<strong>string, int</strong>。</p>
<p>类型参数“接收信息”，类型实参提供信息。</p>
<p>如果没有为泛型类型参数提供类型实参，那么这就是一个未绑定泛型类型。如果制定了类型实参，该类型就是一个已构造类型。</p>
<pre><code class="lang-c#"> public class Dictionary&lt;TKey, TValue&gt;                    // 声明泛型类型
        : IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;        // 实现泛型接口
    {
        public Dictionary() { }                            // 无参构造函数

        public void Add(TKey key, TValue value)            // 类型参数声明方法
        {

        }

    }            // list&lt;T&gt; 读作list of T
</code></pre>
<ul>
<li>泛型可以重载，只需要改变一下类型参数的数量。</li>
</ul>
<h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>概念属于比较简单，我们通过之下的例子来说明</p>
<pre><code class="lang-c#">class Program
    {
        static double TakeSquareRoot(int x)
        {
            return Math.Sqrt(x);
        }
        static void Main(string[] args)
        {

            List&lt;int&gt; interges = new List&lt;int&gt;();
            interges.Add(1);
            interges.Add(3);
            interges.Add(4);
            interges.Add(5);

            // &lt;int double&gt; 代表转换
            Converter&lt;int, double&gt; converter = TakeSquareRoot;   // 创建委托实例

            List&lt;double&gt; doubles;

            doubles = interges.ConvertAll&lt;double&gt;(converter);    // 调用泛型方法

            foreach(double d in doubles)
            {
                Console.WriteLine(d);
            }
        }
}
</code></pre>
<p>非泛型同样可以使用泛型方法</p>
<pre><code class="lang-c#">class Program
    {
        static List&lt;T&gt; MakeList&lt;T&gt; (T first, T second)
        {
            List &lt;T&gt; list = new List&lt;T&gt;();
            list.Add(first);
            list.Add(second);

            return list;
        }
        static void Main(string[] args)
        {
            List&lt;string&gt; list = MakeList&lt;string&gt;(&quot;line1&quot;, &quot;line2&quot;);
            foreach(string x in list)
            {
                Console.WriteLine(x);
            }

        }

    }
</code></pre>
<h2 id="泛型的类型约束"><a href="#泛型的类型约束" class="headerlink" title="泛型的类型约束"></a>泛型的类型约束</h2><p>​    类型约束是为了只有特定的类型调用，相当于制定了规则，从而判断哪些是泛型类型或泛型方法能接受的有效类型实参。</p>
<h3 id="约束类型"><a href="#约束类型" class="headerlink" title="约束类型"></a>约束类型</h3><h5 id="引用类型约束"><a href="#引用类型约束" class="headerlink" title="引用类型约束"></a>引用类型约束</h5><p>用于确保使用的类型是引用类型。</p>
<pre><code class="lang-c#">struct RefSample&lt;T&gt; where T : class

    // 有效
    RefSample&lt;string&gt;
    RefSample&lt;int[]&gt;
    RefSample&lt;IDisposable&gt;

    // ..无效
    RefSample&lt;Guid&gt;
    RefSample&lt;int&gt;
</code></pre>
<p>RefSample 仍然是值类型，以强调被约束的类型参数和类型本身的差异。</p>
<h5 id="值类型约束"><a href="#值类型约束" class="headerlink" title="值类型约束"></a>值类型约束</h5><p>确保使用的类型实参是值类型。</p>
<pre><code class="lang-c#">class ValSample&lt;T&gt; where T : struct

    // ..有效
    ValSample&lt;int&gt;
    ValSample&lt;FileMode&gt;

    // ..无效
    ValSample&lt;object&gt;
    ValSample&lt;StringBuilder&gt;
</code></pre>
<p>ValSample类型本身是一个引用类型，虽然T被约束成值类型。</p>
<h5 id="构造函数类型约束"><a href="#构造函数类型约束" class="headerlink" title="构造函数类型约束"></a>构造函数类型约束</h5><p>​    此约束表示成T：new T ( ), 必须是所有类型参数的最后一个约束，它检查和类型实参是否有一个可用于创建类型实例的无参构造函数。</p>
<p>适用于：</p>
<ul>
<li><p>所有值类型</p>
</li>
<li><p>所有没有显式声明构造函数的非静态，非抽象类</p>
</li>
<li><p>所有显式声明了一个公共无参构造函数的非抽象类</p>
</li>
</ul>
<h5 id="转换类型约束"><a href="#转换类型约束" class="headerlink" title="转换类型约束"></a>转换类型约束</h5><p>​    允许你指定另一个类型，类型实参必须可以通过一致性，引用或装箱转换隐式地转换为该类型。你还可以规定一个类型实参必须可以转换为另一个类型实参，这成为<strong>类型参数约束</strong>。</p>
<pre><code class="lang-c#">class Sample&lt;T&gt; where T : Stream 
    Sample&lt;Stream&gt; // 一致性转换
    Sample&lt;string&gt; // 无效

struct Sample&lt;T&gt; where T : IDispossable
    Sample&lt;SqlConnection&gt;    // 引用转换
    Sample&lt;StringBuilder&gt;    // ..无效

class Sample&lt;T&gt; where T : IComparable&lt;T&gt;
       Sample&lt;int&gt; //装箱转换
    Sample&lt;FileInfo&gt; // 无效

class Sample&lt;T, U&gt; where T : U
    Sample&lt;Stream, IDisposable&gt;     // 引用转换
    Sample&lt;string, Idisposable&gt;        // 无效

// 可以指定多个接口，但只能指定一个类。
class Sample&lt;T&gt; where T : Stream,
                          IEnumerable&lt;string&gt;,
                          IComparable&lt;int&gt;

// ..error            
class Sample&lt;T&gt; where T : Stream, ArrayList,IComparable&lt;int&gt;
</code></pre>
<p>还有一系列限制：指定的类不可以是结构，密封类（比如string) 或者一下任何“特殊”类型。</p>
<ul>
<li><p>System.Object</p>
</li>
<li><p>System.Enum;</p>
</li>
<li><p>System.ValueType;</p>
</li>
<li><p>Systenm.Delegate;</p>
</li>
</ul>
<h5 id="组合约束"><a href="#组合约束" class="headerlink" title="组合约束"></a>组合约束</h5><p>组合约束是以上四种约束的组合，在c#中，不可能任何类型即是引用类型，又是值类型。遵循以下基本要点：</p>
<ul>
<li><strong>class 或 struct 约束必须在其他约束之前，构造函数约束必须在最后。</strong></li>
<li><strong>指定类约束就不能指定值类型约束和引用类型约束</strong></li>
</ul>
<p>但是每一个值类型都有一个无参构造函数，所以假如已经有一个值类型约束，就不允许再指定一个构造函数约束。（如果T被约束成一个值类型，仍然可以在方法内部使用 new T() ）.</p>
<p>其次，如果存在多个转换类型约束，并且其中一个为类，那么它应该出现在接口的前面，而且我们不能多次指定同一个接口。不同的类型参数可以有不同的约束，它们分别由一个单独的where引入。 说这么多不如看看下面的例子</p>
<pre><code class="lang-c#">/* 有效 */

// 值约束，转换类型约束，构造函数类型约束
class Sample&lt;T&gt;:where T : class, IDisposable, new(){...}

// 引用约束，转换类型约束
class Sample&lt;T&gt; : where T : struct, IDisposable{...}

// 前面的一句T是值类型约束，后面的U是引用约束加上T的转换类型约束
class Sample&lt;T, U&gt; : where T : class where U: struct, T{...}

// 前面T的是转换类型约束，后面的U是转换类型约束， 类写在前面
class Sample&lt;T, U&gt; : where T : Stream where U : IDisposable{...}
</code></pre>
<pre><code class="lang-c#">/* 无效 */

// 引用类型和值类型约束一起
class Sample&lt;T&gt;where T : class, struct{...}

// 值类型约束要在其他类型约束前面，指定类约束就不能指定值类型约束和引用类型约束
class Sample&lt;T&gt; where T : Stream, class{...}

// new() 必须是最后一个约束
class Sample&lt;T&gt; where T : new(), Stream{...}

// 类约束要在接口约束之前
class Sample&lt;T&gt; where T : IDisposable, Stream{...}

// 多次指定同一个接口
class Sample&lt;T&gt; where T :  XmlReader, IComparable, IComparable{...}

// 因为T具有引用类型约束，不能作为U的约束
class Sample&lt;T, U&gt; where T : struct where U   class, T {...}
</code></pre>
<p>如果我们从规范中对约束进行分类，将其划分为<strong>主要约束，次要约束，构造函数约束。</strong></p>
<ul>
<li>主要约束：引用类型约束，值类型约束，使用类的转换类型约束</li>
<li>次要约束：接口或其他类型参数的转换类型约束</li>
</ul>
<p>因此我们可以从规范上得知：三种约束都是可选的，但是主要约束只能有一个，次要约束只能有一个。 如果是值类型约束，就不能使用构造函数约束了，因为值类型默认都带有一个无参构造函数。</p>
<h2 id="实现泛型"><a href="#实现泛型" class="headerlink" title="实现泛型"></a>实现泛型</h2><h4 id="默认值表达式"><a href="#默认值表达式" class="headerlink" title="默认值表达式"></a>默认值表达式</h4><p>有些情况虽然一般会被视为错误，但并不是十分严重的问题，也不应该视为异常。例如用户在键入的时候，由于输入一些非法的字符，程序假如能尝试解析一下文本，不必处理错误和捕捉异常，那么在容易出错的地方，可以提升性能。</p>
<p>在c#中，可以采取默认值表达式来解决这个问题。</p>
<pre><code class="lang-c#">static int CompareToDefault&lt;T&gt;(T value) where T : IComparable&lt;T&gt;
        {
            // CompareTo对于所有的引用类型的值都大于null,所以大于1.
            return value.CompareTo(default(T));
        }




        static void Main(string[] args)
        {
            Console.WriteLine(CompareToDefault(&quot;x&quot;));
            Console.WriteLine(CompareToDefault(10));
            Console.WriteLine(CompareToDefault(0));
            Console.WriteLine(CompareToDefault(-10));
            Console.WriteLine(CompareToDefault(DateTime.MinValue));

        }
</code></pre>
<h4 id="直接比较"><a href="#直接比较" class="headerlink" title="直接比较"></a>直接比较</h4><ul>
<li><p>如果一个类型参数是未约束的，那么只能在将该类型的值与null比较时才能使用<strong>== 和 ！= </strong>操作符，不能直接的比较</p>
</li>
<li><p>如果类型实参是一个引用类型，会进行正常的引用比较。</p>
</li>
<li><p>如果为T提供的类型实参是一个非可空值类型，与null进行比较结果总是显示它们不相等。</p>
</li>
<li><p>如果类型实参是一个可空值类型，那么自然而然会与类型的控制进行比较。</p>
</li>
<li><p>如果一个类型参数被约束为值类型，就完全不能为它使用<strong>== 和 ！=</strong>。</p>
</li>
<li><p>如果被约束为引用类型，那么具体执行的比较将完全取决于类型参数被约束成什么类型。</p>
</li>
<li><p>如果它只是一个引用类型，那么执行只是简单的引用比较。</p>
</li>
<li><p>如果它被进一步约束成继承自某个重载了== 和 ！= 操作符的特定类型，就会使用重载的操作符。但要注意，假如调用者指定的类型实参恰巧也进行了重载，那么这个重载操作符是不会使用的。</p>
<p>```c#<br>static bool  AreReferencesEqual<t>(T first, T second) where T : class</t></p>
<pre><code>    {
        return first == second;
    }
</code></pre></li>
</ul>
<pre><code>      static void Main(string[] args)
      {
          string name = &quot;jon&quot;;
          string intro1 = &quot;My name is &quot; + name;
          string intro2 = &quot;My name is &quot; + name;

          Console.WriteLine(intro1 == intro2);
          Console.WriteLine(AreReferencesEqual(intro1, intro2));

      }
</code></pre><blockquote>
<blockquote>
<p>true<br>false<br>  ```</p>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>深入理解c#</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 c# 值类型和引用类型</title>
    <url>/2019/12/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3cs%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p><center><b>这篇文章学习一下c#的值类型和引用类型</b> </center><br><a id="more"></a></p>
<p><br></p>
<h3 id="简要分类"><a href="#简要分类" class="headerlink" title="简要分类"></a>简要分类</h3><ul>
<li><p>数组类型是引用类型，即使元素是值类型</p>
</li>
<li><p>枚举是值类型</p>
</li>
<li><p>委托类型是引用类型</p>
</li>
<li><p>接口类型是引用类型，但可以由值类型实现</p>
</li>
<li><p>类是引用类型，结构是值类型</p>
</li>
</ul>
<h4 id="三个误区："><a href="#三个误区：" class="headerlink" title="三个误区："></a>三个误区：</h4><ul>
<li>结构是轻量级得类</li>
<li>引用类型保存在堆上，值类型保存在栈上<br><strong>引用类型一般都是创建在堆上，例如类实例，大但是值类型不一定都保存在栈上，比如类实例中属性，如果学过csapp,我们可以得知往往是函数参数和局部变量保存在栈上，静态变量则保存在堆上。</strong></li>
<li>对象在c#中默认是通过引用传递的<br><strong>无论是引用传递还是值传递，永远不会传递对象本身，举个例子，在c/c++中使用指针，传递得是对象本身所在得地址而不是对象。</strong></li>
</ul>
]]></content>
      <categories>
        <category>深入理解c#</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>const对指针和引用的限定</title>
    <url>/2019/12/08/c++-primer-const%E5%AF%B9%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8%E7%9A%84%E9%99%90%E5%AE%9A/</url>
    <content><![CDATA[<p><center> <b>本文讲述const和指针，引用之间微妙的关系</b> </center><br><a id="more"></a></p>
<h3 id="const与引用"><a href="#const与引用" class="headerlink" title="const与引用"></a>const与引用</h3><h4 id="const的引用（reference-to-const"><a href="#const的引用（reference-to-const" class="headerlink" title="const的引用（reference to const)"></a>const的引用（reference to const)</h4><p>简称为常量引用，<strong>引用的对象时常量还是非常量可以决定其所参与的操作，但是不会影响引用和对象的绑定关系。</strong></p>
<pre><code class="lang-cpp">const int ci = 1024;
const int &amp;r1 = ci;     // 引用及其对应的对象都是常量


r1 = 42;
int &amp;r2 = ci; // error, 使用一个非常量引用指向一个常量。

int i = 42;
const int &amp;r4 = r3; // 常量引用可以指向一个非常量，但是不允许通过r4对r3进行修改。
</code></pre>
<h3 id="const与指针"><a href="#const与指针" class="headerlink" title="const与指针"></a>const与指针</h3><h4 id="指向常量的指针-pointer-to-const"><a href="#指向常量的指针-pointer-to-const" class="headerlink" title="指向常量的指针(pointer to const)"></a>指向常量的指针(pointer to const)</h4><blockquote>
<p>指向常量的指针没有规定其所指的对象必须是一个常量,指向常量的指针是指不能通过指针来改变所指的变量的值。。</p>
</blockquote>
<pre><code class="lang-cpp">const double pi1 = 3.14;
double pi2 = 3.14;

// 下面两条赋值语句都是合法的。
const double *cptr1 = &amp;pi1;
const double *cptr2 = &amp;pi2;
</code></pre>
<p><br></p>
<h4 id="常量指针-const-pointer"><a href="#常量指针-const-pointer" class="headerlink" title="常量指针(const pointer)"></a>常量指针(const pointer)</h4><blockquote>
<p>常量指针必须初始化，一旦初始化完成，那么它的值将不会在变化。</p>
</blockquote>
<ul>
<li><strong>const poiter 不变的是指针本身的值而不是所指向的那个值，所以const pointer可以通过指针修改所指对象的值。</strong><br>```cpp<br>int errNum = 0;<br>int *const curErr = &errNum;</li>
</ul>
<p>const double pi = 3.14;<br>// 将<em>放在const可以说明指针是一个常量<br>const double</em> const pip = &pi; // pip是一个指向常量对象的常量指针。</p>
<pre><code>
### const 介绍

- 顶层 const 代表对象本身是个常量。
- 底层 const 代表指针所指的对象是一个常量。
- 指针既可以是顶层const，也可以是底层const


  ```cpp
  int i = 0;
  int *const p1 = &amp;i;           //  const pointer -- 这是顶层const 
  const int ci = 42;            // const var -- 这是顶层const
  const int *p2 = &amp;ci;          // pointer to const -- 这是底层const
  const int *const p3 = p2;     // 右边是顶层const， 左边是底层const

  const int &amp;r = ci;            // 用于声明引用的const 都是底层const
</code></pre><p>如果进行copy时，顶层const的不受影响，但是底层const受限制。</p>
<ul>
<li>进行copy的对象，拷入和拷出必须具有相同的底层const资格，或者两个对象的数据类型必须能够转换。<strong>一般来说，非常量可以转换成常量，但是反之不行。</strong></li>
</ul>
<p><br></p>
]]></content>
      <categories>
        <category>c++ primer</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>c++ 学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>c++ primer 第六章学习笔记</title>
    <url>/2019/12/08/c++-primer-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><center><b> 本章主要介绍函数的定义和声明</b> </center><br><a id="more"></a></p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数的基础就不多说了。</p>
<p><br></p>
<p><strong>函数的调用完成两项工作:</strong></p>
<ul>
<li>实参初始化函数对应的形参</li>
<li>将控制权转移给被调用函数</li>
</ul>
<h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><p>在c++中，多使用引用代替指针。</p>
<h4 id="const形参和实参"><a href="#const形参和实参" class="headerlink" title="const形参和实参"></a>const形参和实参</h4><blockquote>
<p>const对 <strong>形参和实参</strong> 的作用和对<strong>变量</strong>的引用是一致的。</p>
</blockquote>
<h4 id="数组形参"><a href="#数组形参" class="headerlink" title="数组形参"></a>数组形参</h4><p>在cpp中，数组的两个特殊性质</p>
<ul>
<li>不能copy，所以数组不能以值传递的方式使用数组参数。</li>
<li>不能用一个数组对另外一个数组进行初始化，也不能直接赋值</li>
<li>传递数组通常转换为<br>```cpp</li>
</ul>
<p>// 以下三种语法是等价的。<br>void function(int *);<br>void function(int []);<br>void function(int [10]);</p>
<pre><code>

##### 管理指针形参的三种方式
- 使用标记，如C风格字符串
```cpp
void print(const char *cp)
{
    if (cp)
        while (*cp)
            cout &lt;&lt; *cp++ &lt;&lt; &quot; &quot;;
}
</code></pre><ul>
<li><p>使用标准库规范</p>
<pre><code class="lang-c++">void print(const char* begin, const char* end)
{
  while (begin != end)
  {
      cout &lt;&lt; *begin++ &lt;&lt; endl;
  }
}
</code></pre>
</li>
<li><p>显示的传递一个代表数组大小的形参</p>
<pre><code class="lang-cpp">void print(const int ia[]， size_t size)
{
for(size_t i = 0; i != size; ++i)
{
  cout &lt;&lt; ia[i] &lt;&lt; endl;
}
}
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>c++ primer</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>c++ 学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>c++ primer 第三章学习笔记</title>
    <url>/2019/05/20/c++-primer-%E7%AC%AC%E4%B8%89%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><center><b>本文初识标准库和迭代器,以及using在 c++11中新用处。</b></center><br><a id="more"></a></p>
<h3 id="3-1-using-声明"><a href="#3-1-using-声明" class="headerlink" title="3.1 using 声明"></a>3.1 using 声明</h3><p>头文件不应该使用using 声明,因为头文件的内容会拷贝到所有引用它的文件中。这样容易产生名字冲突。</p>
<h3 id="3-2-string"><a href="#3-2-string" class="headerlink" title="3.2 string"></a>3.2 string</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><pre><code class="lang-c++">string s1;          // 默认初始化 空串

string s2(s1);      // s2是s1的副本。

string s2 = s1;     // 等价于s2(s1)。

string s3(&quot;value&quot;); // 等价写法 string s3 = &quot;value&quot;;

string s4(n, &#39;c&#39;);  // s4为连续n个字符c组成的字符串。
</code></pre>
<p>如果使用等号初始化一个变量的时候, 实际上执行的是拷贝初始化。<br>反之则是直接初始化。</p>
<h4 id="读写string-对象"><a href="#读写string-对象" class="headerlink" title="读写string 对象"></a>读写string 对象</h4><pre><code class="lang-c++">int main()
{
    string str;
    cin &gt;&gt; str;

    cout &lt;&lt; str &lt;&lt; endl;

    return 0;
}
</code></pre>
<p><strong>string对象回自动忽略开头的空白(空格符, 换行符, 制表符等)并从第一个真正的字符开始读起,直到遇到下一个空白开始。</strong></p>
<p>getline读取一整行，直到遇到换行符，所读的内容存入string对象中。换行符也被读进来了,但是被丢弃了,并没有存储到string对象中</p>
<p>size()函数的返回值是string::size_type类型,这是一个与机器无关的无符号整数类型。</p>
<p>所以当出现string.size()就不要使用int了。</p>
<h4 id="string的比较"><a href="#string的比较" class="headerlink" title="string的比较"></a>string的比较</h4><p>关系运算符 &lt; &lt;= &gt; &gt;=都遵循以下的字典顺序</p>
<ol>
<li>如果两个string对象的长度不同,而且较短string对象的每个字符都与较长string对象对应位置上的字符相同,就说较短的小于较长的。</li>
<li>如果两个string对象在某些对应位置上不一致,则string对象比较的结果实际上是第一对相异字符比较的结果。</li>
</ol>
<h3 id="3-3-vector"><a href="#3-3-vector" class="headerlink" title="3.3 vector"></a>3.3 vector</h3><p>实例化:编译器根据模板创建类和函数的过程。</p>
<h4 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h4><pre><code class="lang-c++">vector(T) v1;   // v1是一个空vector,执行T类型的默认初始化。

vector(T) v2(v1);   // v2中包含了v1所有元素的副本。

vector(T) v2 = v1;   //等价于v2(v1)。

vector(T) v3(n, nval); // v3包含了n个重复的元素,每个元素的值都是val。

vector(T) V4(n);        // n个执行了T类型的值初始化的对象。


// 列表初始化
vector(T) v5{a, b, c ...} // v5包含了初始值个数的元素。

vector(T) v5 = {a, b, c ...} // 等价于v5{a, b, c ...}
</code></pre>
<h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p><strong>push_back()添加到vector的尾端。</strong></p>
<p>c++ 更习惯于先创建空的vector对象,在运行的时候动态添加元素。</p>
<p>vector不能使用下标运算符去添加元素,但是可以用于访问已经存在的元素。</p>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>怎样称为一个有效的迭代器呢？</p>
<ul>
<li>或者指向某个元素,或者指向容器中尾元素的下一个位置</li>
</ul>
<p>怎样获取迭代器？</p>
<p>begin() 和 end()  ：end()获取的是一个尾后迭代器,指向尾部元素的下一个位置,仅仅是一个标记而已。  end() 返回的迭代器并不实际指示某个元素,所以不能对其进行递增或解引用的操作</p>
<p><strong>但凡是使用了迭代器的循环体,都不要向使用迭代器所属的容器添加元素。因为会使迭代器失效。</strong></p>
<h4 id="迭代器运算"><a href="#迭代器运算" class="headerlink" title="迭代器运算"></a>迭代器运算</h4><p>所有标准库容器都有支持递增运算的迭代器。</p>
<p>string和vector迭代器支持更多运算。</p>
]]></content>
      <categories>
        <category>c++ primer</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>c++ 学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>c++ primer 第二章学习笔记</title>
    <url>/2019/05/20/c++-primer-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><center><b>本章主要讲述了c++变量声明,以及各种修饰符的作用和技巧</b></center><br><a id="more"></a></p>
<p>[toc]</p>
<h2 id="0x00-变量初始化和赋值"><a href="#0x00-变量初始化和赋值" class="headerlink" title="0x00. 变量初始化和赋值"></a>0x00. 变量初始化和赋值</h2><p><strong>初始化指变量在创建时给它赋予一个初始值，赋值是将当前对象的值擦除掉,而以一个新值来代替.  </strong></p>
<pre><code class="lang-c++">int var1 = 1;  // 这是初始化。

int var2;
var2 = 3;       // 这是赋值。
</code></pre>
<h3 id="0-1-列表初始化"><a href="#0-1-列表初始化" class="headerlink" title="0.1 列表初始化"></a>0.1 列表初始化</h3><p>下面四条语句都可以定义int类型的units_sold的变量并初始化为0.</p>
<pre><code class="lang-c++">int units_sold = 0;
int units_sold = {0};
int units_sold{0};
int units_sold(0);s
</code></pre>
<pre><code class="lang-c++">long double ld = 3.1415926536;
int a(ld), b = {ld};   // 错误： 转换未执行，因为存在丢失信息的危险。
int c(ld), d = ld;        // 正确：转换执行，且确实丢失了部分值。
</code></pre>
<h3 id="0-2-默认初始化"><a href="#0-2-默认初始化" class="headerlink" title="0.2 默认初始化"></a>0.2 默认初始化</h3><p>如果定义变量时没有指定初值，则变量被默认初始化( default initialized), 此时变量被赋予了“默认值”。<strong>默认值到底是什么由变量类型决定，同时定义变量的位置也会对此有影响</strong>。</p>
<p>如果是内置类型的变量未被显式初始化，它的值由定义的位置决定。定义于任何函数体之外的变量被初始化为0。一种例外情况是，定义在函数体内部的内置类型变量将不被初始化(uninitialized)。一个未被初始化的内置类型变量的值是未定义的，如果试图拷贝或以其他形式访问此类值将引发错误。</p>
<p><strong>每个类各自决定其初始化对象的方式。而且，是否允许不经初始化就定义对象也由类自己决定。如果类允许这种行为，它将决定对象的初始值到底是什么。</strong></p>
<pre><code class="lang-c++">class T1{ int number; };

class T2
{
    public:
        int number;
        T2()
        {};
};

int var1; // 静态非类，进行两阶段初始化：
         // 1) 零初始化将 n 初始化为零
         // 2) 默认初始化不做任何事，令 n 保留为零

int main()
{
    int var2;               // 其值不确定，属于未定义行为
    int var3 = var2;        //  未定义行为

    std::string str1;       // 调用string的默认构造函数，值为&quot;&quot;
    std::string strA[2];    // 每个元素都默认初始化为&quot;&quot;
    // int &amp;r;              // error, 引用必须初始化
    // const T1 t1;         // error ,T1只有隐式默认构造函数
    T1 t1;                  // 调用隐式默认构造函数
    const T2 t2;            // 调用用户提供的默认构造函数

    return 0;
}
</code></pre>
<h2 id="0x01-声明和定义"><a href="#0x01-声明和定义" class="headerlink" title="0x01. 声明和定义"></a>0x01. 声明和定义</h2><p><strong>声明: 使得名字被程序所知道,一个文件如果想使用别处定义的名字则必须包含那个对那个名字的声明。</strong></p>
<p><strong>定义: 负责创建和名字关联的实体</strong></p>
<p>声明一个变量而非定义它,就在变量名前添加关键字extern,而且不要显示化的初始化变量。</p>
<pre><code class="lang-c++">extern int i;                    // 声明i但没定义i
int j;                           //声明并定义j
extern double pi = 3.1416;      // 定义pi
</code></pre>
<p><strong>变量只能被定义一次,但是可以被多次声明。</strong>  </p>
<h2 id="0x02-字面值常量"><a href="#0x02-字面值常量" class="headerlink" title="0x02. 字面值常量"></a>0x02. 字面值常量</h2><h3 id="2-1-字面值介绍"><a href="#2-1-字面值介绍" class="headerlink" title="2.1 字面值介绍"></a>2.1 字面值介绍</h3><p>一个形如42的值被称为字面值常量。字面值是指只能通过它的值来称呼它，没有别名。</p>
<p>类似的字符字面值和字符串字面值，‘a’, “hello world!”</p>
<h3 id="2-2-指定字面值的类型"><a href="#2-2-指定字面值的类型" class="headerlink" title="2.2 指定字面值的类型"></a>2.2 指定字面值的类型</h3><pre><code class="lang-c++">    auto char_1 = L&#39;a&#39;;
    auto string_1 = u8&quot;hi!&quot;;
    auto ulonglong_1 = 42ULL;
    auto float_1 = 1E-3F;
    auto ldouble_1 = 3.14159L;
</code></pre>
<p><img src="https://cdn.mathpix.com/snip/images/MI-2K7rAaDg2cTqzcTM8gdkXaj5RNfZ-3v6VxH66hZU.original.fullsize.png"></p>
<p>布尔类型的字面值是true 和 false. 而指针类型的字面值是<strong>nullptr</strong></p>
<h3 id="2-3-练习"><a href="#2-3-练习" class="headerlink" title="2.3 练习"></a>2.3 练习</h3><p><img src="https://cdn.mathpix.com/snip/images/lSfilGRj7na2imGs4iAxUIA7l4ZFRl5gJkwJ5erRBJ4.original.fullsize.png" alt></p>
<h4 id="2-3-1"><a href="#2-3-1" class="headerlink" title="2.3.1"></a>2.3.1</h4><pre><code>(a)组的数据类型分别是 char, wchar_t,  const char*, const wchar_t *。

(b)组的数据类型分别是 int, unsigned int, long, unsigned long, 八进制的10, 十六进制的12。

(c)组的数据类型:第一个却决于你所声明变量的类型，若是依靠编译器自动推导,类型是double.

​    后面两个分别为float, long double.

(d) 组的数据类型:int, unsigned int , 第三个为float或double，double。
</code></pre><h4 id="2-3-2"><a href="#2-3-2" class="headerlink" title="2.3.2"></a>2.3.2</h4><pre><code>有区别，上面一组定义的字面值为十进制，下面一组定义的字面值为八进制。
</code></pre><h4 id="2-3-3"><a href="#2-3-3" class="headerlink" title="2.3.3"></a>2.3.3</h4><pre><code>1024F 存在语法错误，编译不通过。

\145 值为&#39;e&#39;,  \012值为 &#39;\n&#39;

3.14e1L为long double.
</code></pre><h2 id="0x03-复合类型"><a href="#0x03-复合类型" class="headerlink" title="0x03. 复合类型"></a>0x03. 复合类型</h2><p><strong>复合类型</strong>是指基于其他类型定义的类型，c++语言有几种复合类型， 本章将介绍其中的两种：引用和指针。 </p>
<p>与我们已经掌握的变量声明相比，定义复合类型的变量要复杂很多。一条简单的声明语句由一个数据类型和紧随其后的一个变量名列表组成。</p>
<p>其实更通用的描述是，一条声明语句由一个<strong>基本数据类型</strong>（basetype）和紧随其后的一个<strong>声明符</strong> （declarator）列表组成。每个声明符命名了一个变量并指定该变量为与基本数据类型有关 的某种类型。 目前为止，我们所接触的声明语句中，声明符其实就是变量，此时变量的类型也就是声明的基本数据类型。其实还可能有更复杂的声明符，它基于基本数据类型得到更复杂 的类型，并把它指定给变量．</p>
<h3 id="3-1-引用"><a href="#3-1-引用" class="headerlink" title="3.1 引用"></a>3.1 引用</h3><p>引用分为<strong>左值引用</strong>和<strong>右值引用(c++11引入)</strong>通常在c++的引用指代的是左值引用。</p>
<p>1)<strong>左值引用声明符</strong>：声明 type &D; 将 <code>D</code> 声明为到 <em>声明说明符序列</em> 所确定的类型 <strong>type</strong> 的左值引用。</p>
<p>2)<strong>右值引用声明符</strong>：声明 S&amp;&amp; D; 将 <code>D</code> 声明为到 <em>声明说明符序列</em> 所确定的类型 <code>S</code> 的<em>右值引用</em>。</p>
<p>这里主要介绍左值引用。</p>
<h4 id="3-1-1-引用必须初始化"><a href="#3-1-1-引用必须初始化" class="headerlink" title="3.1.1 引用必须初始化"></a>3.1.1 引用必须初始化</h4><pre><code class="lang-c++">int ival = 1024;
int &amp;refVal = ival;        // refVal指向ival, ival的另外一个名字。
int refVal2;            // error, 引用必须初始化。
</code></pre>
<h4 id="3-1-2-引用即别名"><a href="#3-1-2-引用即别名" class="headerlink" title="3.1.2 引用即别名"></a>3.1.2 引用即别名</h4><p>引用并非是一个对象，它只是一个已经存在的对象所起的另外一个名字。也就是说，当定义一个对象的时候，对引用所做的操作都是在与之绑定的对象上所进行的。</p>
<p>也因为引用不是一个对象，所以不能建立引用的引用， 也不存在引用的数组，不存在指向引用的指针, 不存在void的引用。</p>
<pre><code class="lang-c++">int&amp; a[3]; // 错误
int&amp;* p;   // 错误
int&amp; &amp;r;   // 错误
</code></pre>
<h4 id="3-1-3-引用可以怎样被定义"><a href="#3-1-3-引用可以怎样被定义" class="headerlink" title="3.1.3 引用可以怎样被定义"></a>3.1.3 引用可以怎样被定义</h4><p><strong>引用必须被初始化为指代一个有效的对象或函数。</strong></p>
<pre><code class="lang-c++">int &amp;refVal = 10;   // error, 引用类型初始值必须为对象。

double val1 = 3.1415926;
int &amp;refVal2 = val1; // error, 引用类型必须与绑定的类型严格匹配
</code></pre>
<p><strong>当函数的返回值是左值引用时，函数调用表达式成为左值表达式。</strong></p>
<pre><code class="lang-c++">#include &lt;iostream&gt;
#include &lt;string&gt;

char&amp; char_number(std::string&amp; s, std::size_t n) {
    return s.at(n); // string::at() 返回 char 的引用
}

int main() {
    std::string str = &quot;Test&quot;;
    char_number(str, 1) = &#39;a&#39;; // 函数调用是左值，可被赋值
    std::cout &lt;&lt; str &lt;&lt; &#39;\n&#39;;    // &gt;&gt; Tast
}
</code></pre>
<h4 id="3-1-4-练习"><a href="#3-1-4-练习" class="headerlink" title="3.1.4 练习"></a>3.1.4 练习</h4><p><img src="https://cdn.mathpix.com/snip/images/7ysUDJtcvu3EfNBTD59Dyz52LN3kFuPYa80xjNd0teo.original.fullsize.png" alt></p>
<h5 id="3-1-4-1"><a href="#3-1-4-1" class="headerlink" title="3.1.4.1"></a>3.1.4.1</h5><pre><code>(b)不合法，引用初始化必须为有效对象或函数表达式。

(d)不合法，引用必须初始化。
</code></pre><h5 id="3-1-4-2"><a href="#3-1-4-2" class="headerlink" title="3.1.4.2"></a>3.1.4.2</h5><pre><code>(a)合法，改变变量b的值。

(b)不合法，类型不匹配。

(c) (d)合法，改变i的值。
</code></pre><h3 id="3-2-指针"><a href="#3-2-指针" class="headerlink" title="3.2 指针"></a>3.2 指针</h3><p>指针（pointer）是“指向(point to)”另外一种类型的复合类型。与引用类似，指针也实现了对其他对象的间接访问。然向指针与引用相比又有很多不同点．<strong>其一，指针本身就是一个对象，允许对指针献值和拷贝，而且在指针的生命周期内它可以先后指向几个不同的对象</strong>．<strong>其二，指针无须在定义时赋初值，和其他内置类型一样，在块作用域内定义的指针如果没有被初始化，也将拥有一个不确定的值</strong>。</p>
<h4 id="3-2-1-获取对象的值"><a href="#3-2-1-获取对象的值" class="headerlink" title="3.2.1 获取对象的值"></a>3.2.1 获取对象的值</h4><p>指针存放某个对象的地址，想要获取该地址，需要使用取地址符&amp;。</p>
<h4 id="3-2-2-指针值约定"><a href="#3-2-2-指针值约定" class="headerlink" title="3.2.2 指针值约定"></a>3.2.2 指针值约定</h4><ol>
<li>指向一个对象。</li>
<li>指向紧邻对象所占空间的下一个对象。</li>
<li>空指针。</li>
<li>无效指针，也就是上述情况的其他值。</li>
</ol>
<h4 id="3-2-3-void-指针"><a href="#3-2-3-void-指针" class="headerlink" title="3.2.3 void* 指针"></a>3.2.3 void* 指针</h4><p>void<em> 是一种特殊的指针类型，可用于存放任意对象的地址。一个void</em> 指针存放一个地址，但是无法确定是什么类型的对象。</p>
<h4 id="3-2-4-练习"><a href="#3-2-4-练习" class="headerlink" title="3.2.4 练习"></a>3.2.4 练习</h4><p><img src="https://cdn.mathpix.com/snip/images/C5myQv2_1A50RkbvoRKauTQDn6-mZdIo-DF0dPWR-bI.original.fullsize.png" alt></p>
<pre><code>19题:
    见下面的3.3

20题:
    i = i^2;

21题：
​    (a)中类型不匹配，指针类型必须与所指对象的类型严格匹配。
​    (b)非法，没有取地址符号&amp;。
​    (c)正确。

22题：
       if(p) // ... 判断p是不是一个空指针。
​    if(*p)  是将p指向的内存区域所存放的内容解析为布尔表达式。

23题：
​    给定一个指针，如果该指针没有被初始化，那么指针的值是一个不确定的值，这时使用指针是十分危险的。所以给定一个指针要知它所指的值是否合法，首先要清楚指针是否合法。

24题：
​    根据定义，void *指针是一种特殊的指针类型，可用于存放任意对象的地址，所以合法。而其他类型的指针必须与所指对象的类型严格匹配。
</code></pre><h3 id="3-3-指针和引用的区别"><a href="#3-3-指针和引用的区别" class="headerlink" title="3.3 指针和引用的区别"></a>3.3 指针和引用的区别</h3><ol>
<li>引用不是一个对象，引用只是一个对象的别名，而指针是一个对象。</li>
<li>引用必须初始化，且绑定了对象就能在更改，而指针不需要在定义的时候赋初值，可以重新赋值指向不同的对象。</li>
</ol>
<h3 id="3-4-复合类型的声明"><a href="#3-4-复合类型的声明" class="headerlink" title="3.4 复合类型的声明"></a>3.4 复合类型的声明</h3><p><strong>变量的定义包括一个基本数据类型和一组声明符.</strong></p>
<h4 id="3-4-1-指向指针的指针"><a href="#3-4-1-指向指针的指针" class="headerlink" title="3.4.1 指向指针的指针"></a>3.4.1 指向指针的指针</h4><pre><code class="lang-c++">int iVal = 1024;
int *pi = &amp;iVal; 
int **ppi = &amp;pi;  // 指向指针的指针,*个数可以区分指针的级别. ***代表指向指针的指针的指针.
</code></pre>
<h4 id="3-4-2-指向指针的引用"><a href="#3-4-2-指向指针的引用" class="headerlink" title="3.4.2 指向指针的引用."></a>3.4.2 指向指针的引用.</h4><p>因为引用不是一个对象,所以不存在指向引用的指针。但是指针是一个对象,所以就存在指向指针的引用.</p>
<pre><code class="lang-c++">int i = 42;
int *p;            // p是一个int类型指针
int *&amp;r = p;    // r是指针p的引用.

r = &amp;i;
*r = 0;            // 改变了i的值.
</code></pre>
<p>当多种声明符复合在一起<strong>(或一条比较复杂的的指针或引用语句)</strong>,从右往左阅读可以帮助你理解它的真实含义.</p>
<h4 id="3-4-3-练习"><a href="#3-4-3-练习" class="headerlink" title="3.4.3 练习"></a>3.4.3 练习</h4><h5 id="3-4-3-1-说明下列变量的类型和值"><a href="#3-4-3-1-说明下列变量的类型和值" class="headerlink" title="3.4.3.1 说明下列变量的类型和值."></a>3.4.3.1 说明下列变量的类型和值.</h5><p><strong>(a) int <em>ip, i, &amp;r = i;   (b)int i, </em>ip = 0; (c) int *ip, ip2;</strong></p>
<pre><code>(a) ip是一个指向int类型指针, i 是int类型变量, r是i的引用.

(b) i是int 类型变量, ip int类型的空指针.

(c) ip 指向一个int类型的指针, ip2是一个int类型变量.
</code></pre><h2 id="0x04-const限定符"><a href="#0x04-const限定符" class="headerlink" title="0x04. const限定符"></a>0x04. const限定符</h2><h3 id="4-0-相关概念"><a href="#4-0-相关概念" class="headerlink" title="4.0 相关概念"></a>4.0 相关概念</h3><p>const对象一旦创建之后其值就不能再改变,所以const对象必须初始化.</p>
<pre><code class="lang-c++">const int i = getSize();    // 运行时初始化
const int j = 42;            // 编译时初始化.
const int k;                 // error,未初始化
</code></pre>
<p>指向常量的指针和应用都是自以为是,就是不能通过本身去改变指向对象的值。</p>
<p>但是如果利用一个对象曲初始化另一个对象,则它们是不是const都无关紧要.</p>
<pre><code class="lang-c++">int i = 42;
const int ci = i;
int j = ci;
</code></pre>
<p>且默认情况下,const对象仅在文件内有效,如果要在多个文件之间共享const变量,必须在变量定义之前添加extern关键字.</p>
<h4 id="4-0-1-顶层const-底层const"><a href="#4-0-1-顶层const-底层const" class="headerlink" title="4.0.1 顶层const, 底层const"></a>4.0.1 顶层const, 底层const</h4><p><strong>顶层const : 表示本身是一个常量</strong></p>
<p><strong>底层const : 表示指向的对象是一个常量</strong></p>
<h4 id="4-0-2-类型转换"><a href="#4-0-2-类型转换" class="headerlink" title="4.0.2 类型转换"></a>4.0.2 类型转换</h4><p>前面学到，如果我们想把引用或指针绑定到一个对象上，则引用或指针的类型必须与对象的类型是一致的，但是存在两个例外：</p>
<ol>
<li><strong>初始化常量引用的时候允许用任意表达式作为初始值，只要表达式的结果能转换成引用的类型即可。</strong>(p144)</li>
<li><strong>可以将基类的指针或引用绑定在派生类对象上。</strong>（p534)</li>
</ol>
<h4 id="4-0-3-练习"><a href="#4-0-3-练习" class="headerlink" title="4.0.3 练习"></a>4.0.3 练习</h4><p>下面哪些句子是合法?如果有不合法的句子,请说明为什么?</p>
<p>(a) const int buf;       (b) int cnt = 0;   (C) const int sz = cnt;    (d)++cnt; ++sz;</p>
<pre><code>a)不合法,const对象必须初始化
b)合法
c)合法,初始化对象,无关const
d)cnt可以自增, sz是一个顶层const,不能自增.
</code></pre><h3 id="4-1-const-和-指针"><a href="#4-1-const-和-指针" class="headerlink" title="4.1 const 和 指针"></a>4.1 const 和 指针</h3><h4 id="4-1-1-指向常量的指针"><a href="#4-1-1-指向常量的指针" class="headerlink" title="4.1.1 指向常量的指针"></a>4.1.1 指向常量的指针</h4><p>与引用一样，也可以令指针指向常量或非常量(类似于常量引用)，称为<strong>指向常量的指针</strong>。其不能改变其所指对象的值。要想存放常量对象的地址，只能使用指向常量的指针。</p>
<pre><code class="lang-c++">const double pi = 3.14;            // 常量pi， 它的值不能改变。                        
double *ptr = &amp;pi;            // 不能使用一个非常量指针指向一个常量。
const double *cptr = &amp;pi;    // true
*cptr = 42;                    // 错误， 不能给*cptr赋值
</code></pre>
<p>指针类型必须与所指对象的类型保持一致，但是有两个例外。第一个例外情况是允许令一个指向常量的指针指向一个非常量对象。</p>
<pre><code class="lang-c++">double pi = 3.1415;
const double *cptr = &amp;pi;
</code></pre>
<h4 id="4-1-2-常量指针"><a href="#4-1-2-常量指针" class="headerlink" title="4.1.2 常量指针"></a>4.1.2 常量指针</h4><p>指针是对象，因此像其他对象类型一样，允许把指针本身定为常量。<strong>常量指针</strong>必须初始化，一旦初始化完成，它的值就不能再改变了。</p>
<pre><code class="lang-c++">int errNumber = 0;
int *const curErr = &amp;errNumber;        //curErr是一个常量指针。
const double pi = 3.14159;
const double *const pip = &amp;pi;        //pip是一个指向常量对象的常量指针
</code></pre>
<p>从第二条声明我们可以看到，离curErr最近的的符号是<strong>const</strong>,意味着curErr本身是一个常量对象，而对象的类型由声明符其余部分确定，声明符下一个符号是*，意思是curErr是一个常量指针。</p>
<h4 id="4-1-3-练习"><a href="#4-1-3-练习" class="headerlink" title="4.1.3 练习"></a>4.1.3 练习</h4><p><img src="https://cdn.mathpix.com/snip/images/FG2pazGL_8m4c6efRsU8qZJJbMWB6uqIcKJGrkuW2k0.original.fullsize.png" alt></p>
<pre><code>题27：
    (a)不合法，非常量引用需要用对象初始化，不能用字面值初始化。
    (b)合法
    (c)合法，常量引用可以使用字面值初始化。
    (d)合法
    (e)合法
    (f)不合法，引用必须初始化且引用不能使用顶层const,因为引用不是对象。
    (g)合法。
题28：
    (a)定义一个int类型的变量，和一个指向int的常量指针cp.不合法，const指针必须初始化。
    (b)定义一个指向int的指针p1和常量指针p2.不合法，const指针必须初始化。
    (c)ic未初始化，不合法。
    (d)const指针必须初始化，不合法。
    (e)合法，指向常量的指针不必初始化。
题29：
    (a)合法，常量赋值给普通变量
    (b)不合法，p3是指向常量的指针不能赋值给普通指针。
    (c)不合法，普通指针不能指向常量。
    (d)合法。p3是指向常量的指针。
    (e)合法。普通指针可以初始化常量指针。
    (f)合法。
</code></pre><h3 id="4-2-const引用"><a href="#4-2-const引用" class="headerlink" title="4.2 const引用"></a>4.2 const引用</h3><p>将引用绑定在const对象上,就像绑定在其他对象上一样，称为<strong>对常量的引用</strong>。与普通引用相比，对常量的引用不能用作修改它所绑定的对象。</p>
<pre><code class="lang-c++">const int ci = 1024;
const int &amp;ri = ci;        // true, 引用及其对应的对象都是常量。

ri = 42;     // error,ri是对常量的引用。
int &amp;r2 = ci;    // error, 试图用一个非常量的引用指向一个常量的对象。
</code></pre>
<p>c++并不允许随意改变引用所绑定的对象，所以从意义上理解所有的引用又算是常量，所以对常量的引用常被称为常量引用。此外，引用的对象是常量还是非常量可以决定其所能参与的操作，都无论如何都不会影响引用和对象的绑定关系本身。</p>
<h4 id="4-2-1-初始化和对const的引用"><a href="#4-2-1-初始化和对const的引用" class="headerlink" title="4.2.1 初始化和对const的引用"></a>4.2.1 初始化和对const的引用</h4><pre><code class="lang-c++">const int var1 = 100;
int var2 = 10;

const int &amp;rv1 = var2;        
int &amp;rv2 = var2;
const int &amp;rv3 = var1;

rv1 = 100;    //error, 不可以通过常量引用修改var2的值.
rv2 = 100;     //true。
rv3 = 100; //error, 不能通过常量引用修改var3的值。
</code></pre>
<p>允许一个常量引用绑定非常量的对象，字面值，甚至是一个一般表达式。</p>
<pre><code class="lang-c++">int i = 42;
const int &amp;r1 = i;        // 非常量对象初始化常量引用。
const int &amp;r2 = 42;        // 字面值.....
const int &amp;r3 = r1 * 2;    // 表达式
int &amp;r4 = r1 * 2;        // error, r4是一个非常量引用。
</code></pre>
<p>如何去理解这种例外情况的原因呢？我们看看当一个常量引用被绑定到另外一种类型会发生什么：</p>
<pre><code class="lang-c++">double dVal = 3.14;
const int &amp;ri = dval;

// 上面的代码编译器会转换成以下代码
const int temp = dval;    // 生成一个临时的整型对象。
const int &amp;ri = temp;
</code></pre>
<p>在这种情况下，ri绑定了一个临时量对象。所谓<strong>临时量对象</strong>就是当编译器需要一个空间来暂存表达式的求值结果时临时创建的一个未命名的对象。所以想象以下，如果ri不是常量引用时，如果执行了类似上面的初始化过程将带来一个极其错误的后果。当ri是一个非常量引用时，可以允许对ri进行赋值，这样就会改变ri所引用对象的值。既然通过ri来引用dval,当然是想通过ri来改变dval的值，那这样写通过对ri进行赋值，本质上是改变临时对象的值而没有达到改变dval的值，所以在c++中将ri绑定在一个临时对象上的行为视为非法。</p>
<h4 id="4-2-2-对const引用可能引用一个并非const对象"><a href="#4-2-2-对const引用可能引用一个并非const对象" class="headerlink" title="4.2.2 对const引用可能引用一个并非const对象"></a>4.2.2 对const引用可能引用一个并非const对象</h4><p>我们必须知道：<strong>常量引用仅对引用可参与的操作做出了限定， 对于引用的对象本身是不是一个常量未作限定。因为对象也可能是一个非常量。</strong></p>
<pre><code class="lang-c++">int i = 42;
int &amp;r1 = i;
const int &amp;r2 = i;    // 常量引用绑定一个非常量对象，但不能通过r2去修改i的值。
r1 = 0;        // r1并非常量，i的值修改为0。
r2 = 0;        // error,r2是常量引用，不能通过r2去修改i的值。
</code></pre>
<p>如上面的代码所示，常量引用r2绑定了一个非常量对象，不能通过r2去修改i的值，但是可以通过其他的途径去修改i的值。</p>
<blockquote>
<p>所谓的常量指针或引用，只不过是指针或引用“自以为是”罢了，它们觉得自己指向了常量，所以很自觉地不去改变所指向对象的值。                       ———- 《c++ primer 5th》</p>
</blockquote>
<h2 id="0x05-constexpr和常量表达式"><a href="#0x05-constexpr和常量表达式" class="headerlink" title="0x05. constexpr和常量表达式"></a>0x05. constexpr和常量表达式</h2><h3 id="5-1-常量表达式"><a href="#5-1-常量表达式" class="headerlink" title="5.1 常量表达式"></a>5.1 常量表达式</h3><blockquote>
<p> <strong>常量表达式是指不会改变并且在编译过程就能得到计算结果的表达式。</strong></p>
</blockquote>
<p>很显然，字面值属于常量表达式。</p>
<p>一个对象(或表达式)是不是常量表达式是由它的数据类型和初始值共同决定。</p>
<pre><code class="lang-c++">const int buf_size = 20;        // 常量表达式
const int limit = buf_size + 1  // 常量表达式
int size = 10;                  // 不是常量表达式
</code></pre>
<h3 id="5-2-constexpr变量"><a href="#5-2-constexpr变量" class="headerlink" title="5.2 constexpr变量"></a>5.2 constexpr变量</h3><p>c++11新标准规定：<strong>允许将变量声明为constexpr以便由编译器来验证变量的值是否为常量表达式。</strong></p>
<p>声明为constexpr变量一定是一个常量,而且必须用常量表达式初始化。</p>
<pre><code class="lang-c++">constexpr int mf = 20;
constexpr int limit = mf + 1;
constexpr int sz = size(); //size()是一个constexpr函数的时候才是一条正确声明语句。
</code></pre>
<h3 id="5-3-字面值类型"><a href="#5-3-字面值类型" class="headerlink" title="5.3 字面值类型"></a>5.3 字面值类型</h3><p>常量表达式的值需要在编译时就得到计算，因此对声明constexpr时用到的类型必须有所限制。因为这些类型一般比较简单，值也显血易见、容易得到，就把它们称为“<strong>字面值类型</strong>”（literaltype)。</p>
<p>到目前为止接触过的数据类型中，算术类型、引用和指针都属羊字面值类型.尽管指针和引用都能定义成constexpr，但它们的初始值却受到严格限制。</p>
<p>函数体内定义的变量一般来说并非存放在固定地址中，因此constexpr指针不能指向这样的变量。相反的，定义于所有函数体之外的对象其地址固定不变，能用来初始化constexpr指针．同样是在（第185页）中还将提到，允许函数定义一类有效范围超出函数本身的变量，这类变量和定义在函数体之外的变 量一样也有固定地址。因此，const-expr引用能绑定到这样的变量上，constexpr指 针也能指向这样的变量．</p>
<h3 id="5-4-指针和constexpr"><a href="#5-4-指针和constexpr" class="headerlink" title="5.4 指针和constexpr"></a>5.4 指针和constexpr</h3><p>在constexpr声明中如果定义了一个指针，限定符constexpr仅对指针有效，与所指的对象无效。<strong>一个 constexpr指针的初始值心须是nullptr或者0，或者是存储于某个固定地址中的对象</strong>。</p>
<pre><code class="lang-c++">const int *p = nullptr;            // p是一个指向整型常量的指针。
constexpr int *q = nullptr;        // q是一个指向整数的常量指针。
</code></pre>
<p>p,q的类型相差很远，原因是constexpr将所定义的对象置为了顶层const.当然与其他常量指针类似，constexpr指针可以指向常量也可以指向一个非常量。</p>
<pre><code class="lang-c++">constexpr int *np =  nullptr; // np是一个指向整数的常量指针。
int j = 0;            
constexpr int i = 42;        // i是常量，是固定地址。
constexpr const int *p = &amp;i; // p是一个指向常量的常量指针。j不是局部变量不能用来初始化constexpr指针

// i和j都必须定义在函数体之外
constexpr const int *p = &amp;i;    // p是一个指向常量的常量指针。
constexpr int *p1  = &amp;j;        // p1是常量指针，指向整数j
</code></pre>
<h2 id="0x06-类型别名"><a href="#0x06-类型别名" class="headerlink" title="0x06 类型别名"></a>0x06 类型别名</h2><h3 id="6-1-相关使用"><a href="#6-1-相关使用" class="headerlink" title="6.1 相关使用"></a>6.1 相关使用</h3><p>类型别名是一个名字，它是某种类型的同义词。使用类型别名有很多好处，它让复杂的类型名字变得简单名了，易于理解和使用。有两种方法可用于定义类型别名：</p>
<p>第一种是传统方法使用关键字<strong>typedef</strong>，含有typedef的声明语句定义的不再是变量而是类型别名。</p>
<p>第二种是新标准规定的新方法：使用<strong>别名声明</strong>来定义类型的别名。</p>
<pre><code class="lang-c++">typedef double wages;         // wages是double的同义词。
typedef wafes base, *p;     // base是douwble的同义词，p是double*的同义词

using SI = Sales_item; //    SI是Sales_item的同义词。
</code></pre>
<p>类型别名和类型的名字等价，只要是类型的名字能出现的地方，就能使用类型别名。</p>
<pre><code class="lang-c++">wages hourly, weekly;     // 等价double hourly,weekly;
SI item;                // 等价月Sales_item;
</code></pre>
<h3 id="6-2-指针，常量和类型别名"><a href="#6-2-指针，常量和类型别名" class="headerlink" title="6.2 指针，常量和类型别名"></a>6.2 指针，常量和类型别名</h3><p>如果某个类型别名指代的是复合类型或常量，那么把它用到声明语句里就会产生意想<br>不到的后果，例如下面的声明语句用到了类型<strong>pstring</strong>，它实际上是类型<strong>char *</strong>的别名：</p>
<pre><code class="lang-c++">typedef char* pstring;
const pstring cstr = 0;//cstr是指向char的常量指针
const pstring *ps;    //ps是一个指针，它的对象是指向char的常量指针
</code></pre>
<p>​    上述两条声明语句的基本数据类型都是<strong>const pstring</strong>，和过去一样，<strong>const是对给定类型的修饰。pstring实际上是指向char的指针，因此，const pstring就是指向char的常量指针，而非指向常量字符的指针。</strong></p>
<blockquote>
<p><strong>上面的这句话是理解这一要点的关键之处.</strong></p>
</blockquote>
<p>遇到一条使用了类型别名的声明语句时，人们往往会错误地尝试把类型别名替换成它本来的样子，以理解该语句的含义：</p>
<pre><code class="lang-c++">const char *cstr = 0;    //是对const pstring cstr的错误理解
</code></pre>
<p>再强调一遍：这种理解是错误的．声明语句中用到<strong>pstring</strong>时，其基本数据类型是指针。可是用<strong>char*</strong>重写了声明语句后，数据类型就变成了<strong>char*</strong>,·成为了声明符的一部分。这样改写的结果是，<strong>const char</strong>成了基本数据类型。前后两种声明含义截然不同，前者声明了一个指向char的常量指针，改写后的形式则声明了一个指向<strong>const char</strong>的指针。</p>
<p>谈谈我自己的想法:</p>
<pre><code class="lang-c++">typedef char* pstring;
const pstring cstr = 0;
const pstring *ps;    //ps是一个指针，它的对象是指向char的常量指针

/*
    第一条语句:pstring直接是类型别名,数据类型就是指向char的指针.
    第二条语句:const直接修饰给定类型,cstr就是指向char的常量指针.
    第三条语句:ps本质上就是一个指针,前面声明符都是它的指向的类型,代表ps指向一个指向char的常量指针.

*/
</code></pre>
<h2 id="0x07-auto"><a href="#0x07-auto" class="headerlink" title="0x07. auto"></a>0x07. auto</h2><h3 id="7-1-相关概念"><a href="#7-1-相关概念" class="headerlink" title="7.1 相关概念"></a>7.1 相关概念</h3><p> C++11新标准引入了auto类型说明符，用它就能让编译器替我们去分析表达式所属的类型。和原来那些只对应一种特定类型的说明符（比如double）不同，auto让编译器通 过初始值来推算变量的类型。显然，auto定义的变量必须有初始值： </p>
<pre><code class="lang-c++">//由vall和va12相加的结长可以推断出item的类型 
auto item = vall + va12;    //item初始化为vall和va12相加的结果
</code></pre>
<p>此处编译器将根据val1和val2相加的结果来推断item的类型。如果vall和va12 是类Sales_item的对象，则item的类型就是Salesitem: 如果这两个变量的类型是double,则item的类型就是double，以此类推。 使用auto也能在一条语句中声明多个变量。<strong>因为一条声明语句只能有一个基本数据类型，所以该语句中所有变量的初始基本数据类型都必须一样：</strong> </p>
<pre><code class="lang-c++">auto i = 0, *p = &amp;i;    //true,i是整数,p是指向整数的指针.
auto sz = 0, pi = 3.14; // error, sz和pi的类型不一致.
</code></pre>
<h3 id="7-2-复合类型-常量和auto"><a href="#7-2-复合类型-常量和auto" class="headerlink" title="7.2 复合类型,常量和auto"></a>7.2 复合类型,常量和auto</h3><p>编译器推断出来的auto类型有时候和初始值的类型并不完全一样，编译器会适当地 改变结果类型使其史符合初始化规则。 首先，正如我们所熟知的，使用引用其实是使用引用的对象，特别是当引用被用作初始值时，真正参与初始化的其实是引用对象的值．此时编译器以引用对象的类型作为auto 的类型：</p>
<pre><code class="lang-c++">int i = 0, &amp;r = i;
auto a = r;        // 采用引用r初始化a,实质上是采用i的值取初始化a
</code></pre>
<p>其次,auto 一般会忽略掉顶层const，保留底层const。</p>
<pre><code class="lang-c++">int i = 0;
const int ci = i, &amp;cr = ci;    // cr是一个指向整数常量的引用,是底层const, ci是整数常量,是顶层const
auto b = ci;    // b是一个整数 ci顶层const特性被忽略掉
auto a = cr;    // c是一个整数(cr是ci的引用,本质上用ci初始化)
auto d = &amp;i;    // d是一个整形指针
auto e = &amp;ci;   // e是一个指向常量整数的指针,对常量对象取地址底层const
</code></pre>
<p>如果你希望推断出的auto类型是一个顶层const,需要明确指出:</p>
<pre><code class="lang-c++">const auto f = ci; // 这个时候f才有顶层const特性, f是const int
</code></pre>
<h2 id="0x0-decltype"><a href="#0x0-decltype" class="headerlink" title="0x0. decltype"></a>0x0. decltype</h2><ul>
<li>decltype(( variable ))结果永远是引用</li>
<li>decltype( variable ) 只有variable本身是引用才是引用。</li>
</ul>
]]></content>
      <categories>
        <category>c++ primer</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>c++ 学习笔记</tag>
      </tags>
  </entry>
</search>
